CREATE TABLE IF NOT EXISTS ratings
(
    rating_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR UNIQUE NOT NULL,
    description VARCHAR
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR NOT NULL,
    description  VARCHAR(200),
    release_date DATE,
    duration     INTEGER,
    rating_id    INTEGER REFERENCES ratings (rating_id) ON DELETE SET NULL,
    CONSTRAINT chk_release_date CHECK (release_date >= DATE '1895-12-28'),
    CONSTRAINT chk_duration CHECK (duration > 0)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR UNIQUE NOT NULL,
    login    VARCHAR UNIQUE NOT NULL,
    name     VARCHAR,
    birthday DATE,
    CONSTRAINT chk_birthday CHECK (birthday <= CURRENT_DATE),
    CONSTRAINT chk_login CHECK (login NOT LIKE '% %')
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id   INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    status    VARCHAR NOT NULL DEFAULT ('UNCONFIRMED'),
    CONSTRAINT chk_status CHECK (status IN ('UNCONFIRMED', 'CONFIRMED')),
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);